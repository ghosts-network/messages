/*
 * GhostNetwork.Messages
 * Http client for GhostNetwork.Messages
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 5.4.0
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "/";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.

export default function() {
    group("/chats/{chatId}/messages", () => {
        let take = 'TODO_EDIT_THE_TAKE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let chatId = 'TODO_EDIT_THE_CHATID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let lastMessageId = 'TODO_EDIT_THE_LASTMESSAGEID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/chats/${chatId}/messages?lastMessageId=${lastMessageId}&take=${take}`;
            let request = http.get(url);

            check(request, {
                "Messages": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/chats/${chatId}/messages`;
            // TODO: edit the parameters of the request body.
            let body = {"senderId": "string", "message": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "New message": (r) => r.status === 201
            });
        }
    });

    group("/chats/{chatId}/messages/{messageId}", () => {
        let chatId = 'TODO_EDIT_THE_CHATID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let messageId = 'TODO_EDIT_THE_MESSAGEID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/chats/${chatId}/messages/${messageId}`;
            // TODO: edit the parameters of the request body.
            let body = {"senderId": "uuid", "message": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Successfully updated": (r) => r.status === 204
            });
        }
    });

    group("/chats/{chatId}", () => {
        let chatId = 'TODO_EDIT_THE_CHATID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/chats/${chatId}`;
            let request = http.get(url);

            check(request, {
                "Chat": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/chats/${chatId}`;
            let request = http.del(url);

            check(request, {
                "Success": (r) => r.status === 200
            });
            check(request, {
                "Chat successfully deleted": (r) => r.status === 204
            });
        }
    });

    group("/chats/search/{userId}", () => {
        let take = 'TODO_EDIT_THE_TAKE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let skip = 'TODO_EDIT_THE_SKIP'; // specify value as there is no example value for this parameter in OpenAPI spec
        let userId = 'TODO_EDIT_THE_USERID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/chats/search/${userId}?skip=${skip}&take=${take}`;
            let request = http.get(url);

            check(request, {
                "Exist user chats": (r) => r.status === 200
            });
        }
    });

    group("/chats/messages/{messageId}", () => {
        let messageId = 'TODO_EDIT_THE_MESSAGEID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/chats/messages/${messageId}`;
            let request = http.get(url);

            check(request, {
                "Message": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/chats/messages/${messageId}`;
            let request = http.del(url);

            check(request, {
                "Message successfully deleted": (r) => r.status === 204
            });
        }
    });

    group("/chats", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/chats`;
            // TODO: edit the parameters of the request body.
            let body = {"name": "string", "participants": "list"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Connection successfully created": (r) => r.status === 201
            });
        }
    });

}
